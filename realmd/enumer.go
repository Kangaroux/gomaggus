// Code generated by "enumer -type=ClientOpcode,ServerOpcode -trimprefix=Op -output=enumer.go"; DO NOT EDIT.

package realmd

import (
	"fmt"
	"strings"
)

const _ClientOpcodeName = "ClientCharCreateClientCharListClientCharDeleteClientPlayerLoginClientLogoutForceClientLogoutRequestClientLogoutCancelClientStandStateChangeClientPingClientAuthSessionClientGetStorageClientPutStorageClientRealmSplitClientGetUnixTimeClientReadyForAccountDataTimes"
const _ClientOpcodeLowerName = "clientcharcreateclientcharlistclientchardeleteclientplayerloginclientlogoutforceclientlogoutrequestclientlogoutcancelclientstandstatechangeclientpingclientauthsessionclientgetstorageclientputstorageclientrealmsplitclientgetunixtimeclientreadyforaccountdatatimes"

var _ClientOpcodeMap = map[ClientOpcode]string{
	54:   _ClientOpcodeName[0:16],
	55:   _ClientOpcodeName[16:30],
	56:   _ClientOpcodeName[30:46],
	61:   _ClientOpcodeName[46:63],
	74:   _ClientOpcodeName[63:80],
	75:   _ClientOpcodeName[80:99],
	78:   _ClientOpcodeName[99:117],
	257:  _ClientOpcodeName[117:139],
	476:  _ClientOpcodeName[139:149],
	493:  _ClientOpcodeName[149:166],
	522:  _ClientOpcodeName[166:182],
	523:  _ClientOpcodeName[182:198],
	908:  _ClientOpcodeName[198:214],
	1270: _ClientOpcodeName[214:231],
	1279: _ClientOpcodeName[231:261],
}

func (i ClientOpcode) String() string {
	if str, ok := _ClientOpcodeMap[i]; ok {
		return str
	}
	return fmt.Sprintf("ClientOpcode(%d)", i)
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ClientOpcodeNoOp() {
	var x [1]struct{}
	_ = x[OpClientCharCreate-(54)]
	_ = x[OpClientCharList-(55)]
	_ = x[OpClientCharDelete-(56)]
	_ = x[OpClientPlayerLogin-(61)]
	_ = x[OpClientLogoutForce-(74)]
	_ = x[OpClientLogoutRequest-(75)]
	_ = x[OpClientLogoutCancel-(78)]
	_ = x[OpClientStandStateChange-(257)]
	_ = x[OpClientPing-(476)]
	_ = x[OpClientAuthSession-(493)]
	_ = x[OpClientGetStorage-(522)]
	_ = x[OpClientPutStorage-(523)]
	_ = x[OpClientRealmSplit-(908)]
	_ = x[OpClientGetUnixTime-(1270)]
	_ = x[OpClientReadyForAccountDataTimes-(1279)]
}

var _ClientOpcodeValues = []ClientOpcode{OpClientCharCreate, OpClientCharList, OpClientCharDelete, OpClientPlayerLogin, OpClientLogoutForce, OpClientLogoutRequest, OpClientLogoutCancel, OpClientStandStateChange, OpClientPing, OpClientAuthSession, OpClientGetStorage, OpClientPutStorage, OpClientRealmSplit, OpClientGetUnixTime, OpClientReadyForAccountDataTimes}

var _ClientOpcodeNameToValueMap = map[string]ClientOpcode{
	_ClientOpcodeName[0:16]:         OpClientCharCreate,
	_ClientOpcodeLowerName[0:16]:    OpClientCharCreate,
	_ClientOpcodeName[16:30]:        OpClientCharList,
	_ClientOpcodeLowerName[16:30]:   OpClientCharList,
	_ClientOpcodeName[30:46]:        OpClientCharDelete,
	_ClientOpcodeLowerName[30:46]:   OpClientCharDelete,
	_ClientOpcodeName[46:63]:        OpClientPlayerLogin,
	_ClientOpcodeLowerName[46:63]:   OpClientPlayerLogin,
	_ClientOpcodeName[63:80]:        OpClientLogoutForce,
	_ClientOpcodeLowerName[63:80]:   OpClientLogoutForce,
	_ClientOpcodeName[80:99]:        OpClientLogoutRequest,
	_ClientOpcodeLowerName[80:99]:   OpClientLogoutRequest,
	_ClientOpcodeName[99:117]:       OpClientLogoutCancel,
	_ClientOpcodeLowerName[99:117]:  OpClientLogoutCancel,
	_ClientOpcodeName[117:139]:      OpClientStandStateChange,
	_ClientOpcodeLowerName[117:139]: OpClientStandStateChange,
	_ClientOpcodeName[139:149]:      OpClientPing,
	_ClientOpcodeLowerName[139:149]: OpClientPing,
	_ClientOpcodeName[149:166]:      OpClientAuthSession,
	_ClientOpcodeLowerName[149:166]: OpClientAuthSession,
	_ClientOpcodeName[166:182]:      OpClientGetStorage,
	_ClientOpcodeLowerName[166:182]: OpClientGetStorage,
	_ClientOpcodeName[182:198]:      OpClientPutStorage,
	_ClientOpcodeLowerName[182:198]: OpClientPutStorage,
	_ClientOpcodeName[198:214]:      OpClientRealmSplit,
	_ClientOpcodeLowerName[198:214]: OpClientRealmSplit,
	_ClientOpcodeName[214:231]:      OpClientGetUnixTime,
	_ClientOpcodeLowerName[214:231]: OpClientGetUnixTime,
	_ClientOpcodeName[231:261]:      OpClientReadyForAccountDataTimes,
	_ClientOpcodeLowerName[231:261]: OpClientReadyForAccountDataTimes,
}

var _ClientOpcodeNames = []string{
	_ClientOpcodeName[0:16],
	_ClientOpcodeName[16:30],
	_ClientOpcodeName[30:46],
	_ClientOpcodeName[46:63],
	_ClientOpcodeName[63:80],
	_ClientOpcodeName[80:99],
	_ClientOpcodeName[99:117],
	_ClientOpcodeName[117:139],
	_ClientOpcodeName[139:149],
	_ClientOpcodeName[149:166],
	_ClientOpcodeName[166:182],
	_ClientOpcodeName[182:198],
	_ClientOpcodeName[198:214],
	_ClientOpcodeName[214:231],
	_ClientOpcodeName[231:261],
}

// ClientOpcodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ClientOpcodeString(s string) (ClientOpcode, error) {
	if val, ok := _ClientOpcodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ClientOpcodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ClientOpcode values", s)
}

// ClientOpcodeValues returns all values of the enum
func ClientOpcodeValues() []ClientOpcode {
	return _ClientOpcodeValues
}

// ClientOpcodeStrings returns a slice of all String values of the enum
func ClientOpcodeStrings() []string {
	strs := make([]string, len(_ClientOpcodeNames))
	copy(strs, _ClientOpcodeNames)
	return strs
}

// IsAClientOpcode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ClientOpcode) IsAClientOpcode() bool {
	_, ok := _ClientOpcodeMap[i]
	return ok
}

const _ServerOpcodeName = "ServerCharCreateServerCharListServerCharDeleteServerCharLoginFailedServerSetTimeSpeedServerLogoutServerLogoutCompleteServerLogoutCancelACKServerUpdateObjectServerPlayCinematicServerTutorialFlagsServerFactionReputationServerActionButtonsServerInitialSpellsServerHearthLocationServerPongServerAuthChallengeServerAuthResponseServerClientStorageTimesServerGetStorageServerCharLoginVerifyWorldServerStandStateServerInitialWorldStatesServerMOTDServerRealmSplitServerSystemFeaturesServerPutStorageOKServerUnixTime"
const _ServerOpcodeLowerName = "servercharcreateservercharlistserverchardeleteservercharloginfailedserversettimespeedserverlogoutserverlogoutcompleteserverlogoutcancelackserverupdateobjectserverplaycinematicservertutorialflagsserverfactionreputationserveractionbuttonsserverinitialspellsserverhearthlocationserverpongserverauthchallengeserverauthresponseserverclientstoragetimesservergetstorageservercharloginverifyworldserverstandstateserverinitialworldstatesservermotdserverrealmsplitserversystemfeaturesserverputstorageokserverunixtime"

var _ServerOpcodeMap = map[ServerOpcode]string{
	58:   _ServerOpcodeName[0:16],
	59:   _ServerOpcodeName[16:30],
	60:   _ServerOpcodeName[30:46],
	65:   _ServerOpcodeName[46:67],
	66:   _ServerOpcodeName[67:85],
	76:   _ServerOpcodeName[85:97],
	77:   _ServerOpcodeName[97:117],
	79:   _ServerOpcodeName[117:138],
	169:  _ServerOpcodeName[138:156],
	250:  _ServerOpcodeName[156:175],
	253:  _ServerOpcodeName[175:194],
	290:  _ServerOpcodeName[194:217],
	297:  _ServerOpcodeName[217:236],
	298:  _ServerOpcodeName[236:255],
	341:  _ServerOpcodeName[255:275],
	477:  _ServerOpcodeName[275:285],
	492:  _ServerOpcodeName[285:304],
	494:  _ServerOpcodeName[304:322],
	521:  _ServerOpcodeName[322:346],
	524:  _ServerOpcodeName[346:362],
	566:  _ServerOpcodeName[362:388],
	669:  _ServerOpcodeName[388:404],
	706:  _ServerOpcodeName[404:428],
	829:  _ServerOpcodeName[428:438],
	907:  _ServerOpcodeName[438:454],
	969:  _ServerOpcodeName[454:474],
	1123: _ServerOpcodeName[474:492],
	1271: _ServerOpcodeName[492:506],
}

func (i ServerOpcode) String() string {
	if str, ok := _ServerOpcodeMap[i]; ok {
		return str
	}
	return fmt.Sprintf("ServerOpcode(%d)", i)
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ServerOpcodeNoOp() {
	var x [1]struct{}
	_ = x[OpServerCharCreate-(58)]
	_ = x[OpServerCharList-(59)]
	_ = x[OpServerCharDelete-(60)]
	_ = x[OpServerCharLoginFailed-(65)]
	_ = x[OpServerSetTimeSpeed-(66)]
	_ = x[OpServerLogout-(76)]
	_ = x[OpServerLogoutComplete-(77)]
	_ = x[OpServerLogoutCancelACK-(79)]
	_ = x[OpServerUpdateObject-(169)]
	_ = x[OpServerPlayCinematic-(250)]
	_ = x[OpServerTutorialFlags-(253)]
	_ = x[OpServerFactionReputation-(290)]
	_ = x[OpServerActionButtons-(297)]
	_ = x[OpServerInitialSpells-(298)]
	_ = x[OpServerHearthLocation-(341)]
	_ = x[OpServerPong-(477)]
	_ = x[OpServerAuthChallenge-(492)]
	_ = x[OpServerAuthResponse-(494)]
	_ = x[OpServerClientStorageTimes-(521)]
	_ = x[OpServerGetStorage-(524)]
	_ = x[OpServerCharLoginVerifyWorld-(566)]
	_ = x[OpServerStandState-(669)]
	_ = x[OpServerInitialWorldStates-(706)]
	_ = x[OpServerMOTD-(829)]
	_ = x[OpServerRealmSplit-(907)]
	_ = x[OpServerSystemFeatures-(969)]
	_ = x[OpServerPutStorageOK-(1123)]
	_ = x[OpServerUnixTime-(1271)]
}

var _ServerOpcodeValues = []ServerOpcode{OpServerCharCreate, OpServerCharList, OpServerCharDelete, OpServerCharLoginFailed, OpServerSetTimeSpeed, OpServerLogout, OpServerLogoutComplete, OpServerLogoutCancelACK, OpServerUpdateObject, OpServerPlayCinematic, OpServerTutorialFlags, OpServerFactionReputation, OpServerActionButtons, OpServerInitialSpells, OpServerHearthLocation, OpServerPong, OpServerAuthChallenge, OpServerAuthResponse, OpServerClientStorageTimes, OpServerGetStorage, OpServerCharLoginVerifyWorld, OpServerStandState, OpServerInitialWorldStates, OpServerMOTD, OpServerRealmSplit, OpServerSystemFeatures, OpServerPutStorageOK, OpServerUnixTime}

var _ServerOpcodeNameToValueMap = map[string]ServerOpcode{
	_ServerOpcodeName[0:16]:         OpServerCharCreate,
	_ServerOpcodeLowerName[0:16]:    OpServerCharCreate,
	_ServerOpcodeName[16:30]:        OpServerCharList,
	_ServerOpcodeLowerName[16:30]:   OpServerCharList,
	_ServerOpcodeName[30:46]:        OpServerCharDelete,
	_ServerOpcodeLowerName[30:46]:   OpServerCharDelete,
	_ServerOpcodeName[46:67]:        OpServerCharLoginFailed,
	_ServerOpcodeLowerName[46:67]:   OpServerCharLoginFailed,
	_ServerOpcodeName[67:85]:        OpServerSetTimeSpeed,
	_ServerOpcodeLowerName[67:85]:   OpServerSetTimeSpeed,
	_ServerOpcodeName[85:97]:        OpServerLogout,
	_ServerOpcodeLowerName[85:97]:   OpServerLogout,
	_ServerOpcodeName[97:117]:       OpServerLogoutComplete,
	_ServerOpcodeLowerName[97:117]:  OpServerLogoutComplete,
	_ServerOpcodeName[117:138]:      OpServerLogoutCancelACK,
	_ServerOpcodeLowerName[117:138]: OpServerLogoutCancelACK,
	_ServerOpcodeName[138:156]:      OpServerUpdateObject,
	_ServerOpcodeLowerName[138:156]: OpServerUpdateObject,
	_ServerOpcodeName[156:175]:      OpServerPlayCinematic,
	_ServerOpcodeLowerName[156:175]: OpServerPlayCinematic,
	_ServerOpcodeName[175:194]:      OpServerTutorialFlags,
	_ServerOpcodeLowerName[175:194]: OpServerTutorialFlags,
	_ServerOpcodeName[194:217]:      OpServerFactionReputation,
	_ServerOpcodeLowerName[194:217]: OpServerFactionReputation,
	_ServerOpcodeName[217:236]:      OpServerActionButtons,
	_ServerOpcodeLowerName[217:236]: OpServerActionButtons,
	_ServerOpcodeName[236:255]:      OpServerInitialSpells,
	_ServerOpcodeLowerName[236:255]: OpServerInitialSpells,
	_ServerOpcodeName[255:275]:      OpServerHearthLocation,
	_ServerOpcodeLowerName[255:275]: OpServerHearthLocation,
	_ServerOpcodeName[275:285]:      OpServerPong,
	_ServerOpcodeLowerName[275:285]: OpServerPong,
	_ServerOpcodeName[285:304]:      OpServerAuthChallenge,
	_ServerOpcodeLowerName[285:304]: OpServerAuthChallenge,
	_ServerOpcodeName[304:322]:      OpServerAuthResponse,
	_ServerOpcodeLowerName[304:322]: OpServerAuthResponse,
	_ServerOpcodeName[322:346]:      OpServerClientStorageTimes,
	_ServerOpcodeLowerName[322:346]: OpServerClientStorageTimes,
	_ServerOpcodeName[346:362]:      OpServerGetStorage,
	_ServerOpcodeLowerName[346:362]: OpServerGetStorage,
	_ServerOpcodeName[362:388]:      OpServerCharLoginVerifyWorld,
	_ServerOpcodeLowerName[362:388]: OpServerCharLoginVerifyWorld,
	_ServerOpcodeName[388:404]:      OpServerStandState,
	_ServerOpcodeLowerName[388:404]: OpServerStandState,
	_ServerOpcodeName[404:428]:      OpServerInitialWorldStates,
	_ServerOpcodeLowerName[404:428]: OpServerInitialWorldStates,
	_ServerOpcodeName[428:438]:      OpServerMOTD,
	_ServerOpcodeLowerName[428:438]: OpServerMOTD,
	_ServerOpcodeName[438:454]:      OpServerRealmSplit,
	_ServerOpcodeLowerName[438:454]: OpServerRealmSplit,
	_ServerOpcodeName[454:474]:      OpServerSystemFeatures,
	_ServerOpcodeLowerName[454:474]: OpServerSystemFeatures,
	_ServerOpcodeName[474:492]:      OpServerPutStorageOK,
	_ServerOpcodeLowerName[474:492]: OpServerPutStorageOK,
	_ServerOpcodeName[492:506]:      OpServerUnixTime,
	_ServerOpcodeLowerName[492:506]: OpServerUnixTime,
}

var _ServerOpcodeNames = []string{
	_ServerOpcodeName[0:16],
	_ServerOpcodeName[16:30],
	_ServerOpcodeName[30:46],
	_ServerOpcodeName[46:67],
	_ServerOpcodeName[67:85],
	_ServerOpcodeName[85:97],
	_ServerOpcodeName[97:117],
	_ServerOpcodeName[117:138],
	_ServerOpcodeName[138:156],
	_ServerOpcodeName[156:175],
	_ServerOpcodeName[175:194],
	_ServerOpcodeName[194:217],
	_ServerOpcodeName[217:236],
	_ServerOpcodeName[236:255],
	_ServerOpcodeName[255:275],
	_ServerOpcodeName[275:285],
	_ServerOpcodeName[285:304],
	_ServerOpcodeName[304:322],
	_ServerOpcodeName[322:346],
	_ServerOpcodeName[346:362],
	_ServerOpcodeName[362:388],
	_ServerOpcodeName[388:404],
	_ServerOpcodeName[404:428],
	_ServerOpcodeName[428:438],
	_ServerOpcodeName[438:454],
	_ServerOpcodeName[454:474],
	_ServerOpcodeName[474:492],
	_ServerOpcodeName[492:506],
}

// ServerOpcodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ServerOpcodeString(s string) (ServerOpcode, error) {
	if val, ok := _ServerOpcodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ServerOpcodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ServerOpcode values", s)
}

// ServerOpcodeValues returns all values of the enum
func ServerOpcodeValues() []ServerOpcode {
	return _ServerOpcodeValues
}

// ServerOpcodeStrings returns a slice of all String values of the enum
func ServerOpcodeStrings() []string {
	strs := make([]string, len(_ServerOpcodeNames))
	copy(strs, _ServerOpcodeNames)
	return strs
}

// IsAServerOpcode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ServerOpcode) IsAServerOpcode() bool {
	_, ok := _ServerOpcodeMap[i]
	return ok
}
